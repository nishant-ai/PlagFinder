Supervised learning (SL) is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from .mw-parser-output .vanchor>:target~.vanchor-text{background-color:#b1d2ff}labeled training data consisting of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a "reasonable" way (see inductive bias). This statistical quality of an algorithm is measured through the so-called generalization error.
The parallel task in human and animal psychology is often referred to as concept learning.
To solve a given problem of supervised learning, one has to perform the following steps:
A wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem).
There are four major issues to consider in supervised learning:
A first issue is the tradeoff between bias and variance. Imagine that we have available several different, but equally good, training data sets. A learning algorithm is biased for a particular input 
  
    
      
        x
      
    
    {\displaystyle x}
  
 if, when trained on each of these data sets, it is systematically incorrect when predicting the correct output for 
  
    
      
        x
      
    
    {\displaystyle x}
  
. A learning algorithm has high variance for a particular input 
  
    
      
        x
      
    
    {\displaystyle x}
  
 if it predicts different output values when trained on different training sets. The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm. Generally, there is a tradeoff between bias and variance. A learning algorithm with low bias must be "flexible" so that it can fit the data well. But if the learning algorithm is too flexible, it will fit each training data set differently, and hence have high variance. A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance (either automatically or by providing a bias/variance parameter that the user can adjust).
The second issue is the amount of training data available relative to the complexity of the "true" function (classifier or regression function). If the true function is simple, then an "inflexible" learning algorithm with high bias and low variance will be able to learn it from a small amount of data. But if the true function is highly complex (e.g., because it involves complex interactions among many different input features and behaves differently in different parts of the input space), then the function will only be able to learn from a very large amount of training data and using a "flexible" learning algorithm with low bias and high variance. There is a clear demarcation between the input and the desired output.
A third issue is the dimensionality of the input space. If the input feature vectors have very high dimension, the learning problem can be difficult even if the true function only depends on a small number of those features. This is because the many "extra" dimensions can confuse the learning algorithm and cause it to have high variance. Hence, high input dimensional typically requires tuning the classifier to have low variance and high bias. In practice, if the engineer can manually remove irrelevant features from the input data, this is likely to improve the accuracy of the learned function. In addition, there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones. This is an instance of the more general strategy of dimensionality reduction, which seeks to map the input data into a lower-dimensional space prior to running the supervised learning algorithm.
A fourth issue is the degree of noise in the desired output values (the supervisory target variables). If the desired output values are often incorrect (because of human error or sensor errors), then the learning algorithm should not attempt to find a function that exactly matches the training examples. Attempting to fit the data too carefully leads to overfitting. You can overfit even when there are no measurement errors (stochastic noise) if the function you are trying to learn is too complex for your learning model. In such a situation, the part of the target function that cannot be modeled "corrupts" your training data - this phenomenon has been called deterministic noise. When either type of noise is present, it is better to go with a higher bias, lower variance estimator.
In practice, there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm. There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance.
Other factors to consider when choosing and applying a learning algorithm include the following:
When considering a new application, the engineer can compare multiple learning algorithms and experimentally determine which one works best on the problem at hand (see cross validation). Tuning the performance of a learning algorithm can be very time-consuming. Given fixed resources, it is often better to spend more time collecting additional training data and more informative features than it is to spend extra time tuning the learning algorithms.
The most widely used learning algorithms are: 
Given a set of 
  
    
      
        N
      
    
    {\displaystyle N}
  
 training examples of the form 
  
    
      
        {
        (
        
          x
          
            1
          
        
        ,
        
          y
          
            1
          
        
        )
        ,
        .
        .
        .
        ,
        (
        
          x
          
            N
          
        
        ,
        
        
          y
          
            N
          
        
        )
        }
      
    
    {\displaystyle \{(x_{1},y_{1}),...,(x_{N},\;y_{N})\}}
  
 such that 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
  
 is the feature vector of the 
  
    
      
        i
      
    
    {\displaystyle i}
  
-th example and 
  
    
      
        
          y
          
            i
          
        
      
    
    {\displaystyle y_{i}}
  
 is its label (i.e., class), a learning algorithm seeks a function 
  
    
      
        g
        :
        X
        →
        Y
      
    
    {\displaystyle g:X\to Y}
  
, where 
  
    
      
        X
      
    
    {\displaystyle X}
  
 is the input space and 
  
    
      
        Y
      
    
    {\displaystyle Y}
  
 is the output space. The function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 is an element of some space of possible functions 
  
    
      
        G
      
    
    {\displaystyle G}
  
, usually called the hypothesis space. It is sometimes convenient to represent 
  
    
      
        g
      
    
    {\displaystyle g}
  
 using a scoring function 
  
    
      
        f
        :
        X
        ×
        Y
        →
        
          R
        
      
    
    {\displaystyle f:X\times Y\to \mathbb {R} }
  
 such that 
  
    
      
        g
      
    
    {\displaystyle g}
  
 is defined as returning the 
  
    
      
        y
      
    
    {\displaystyle y}
  
 value that gives the highest score: 
  
    
      
        g
        (
        x
        )
        =
        
          
            
              arg
              ⁡
              max
            
            y
          
        
        
        f
        (
        x
        ,
        y
        )
      
    
    {\displaystyle g(x)={\underset {y}{\arg \max }}\;f(x,y)}
  
. Let 
  
    
      
        F
      
    
    {\displaystyle F}
  
 denote the space of scoring functions.
Although 
  
    
      
        G
      
    
    {\displaystyle G}
  
 and 
  
    
      
        F
      
    
    {\displaystyle F}
  
 can be any space of functions, many learning algorithms are probabilistic models where 
  
    
      
        g
      
    
    {\displaystyle g}
  
 takes the form of a conditional probability model 
  
    
      
        g
        (
        x
        )
        =
        P
        (
        y
        
          |
        
        x
        )
      
    
    {\displaystyle g(x)=P(y|x)}
  
, or 
  
    
      
        f
      
    
    {\displaystyle f}
  
 takes the form of a joint probability model 
  
    
      
        f
        (
        x
        ,
        y
        )
        =
        P
        (
        x
        ,
        y
        )
      
    
    {\displaystyle f(x,y)=P(x,y)}
  
. For example, naive Bayes and linear discriminant analysis are joint probability models, whereas logistic regression is a conditional probability model.
There are two basic approaches to choosing 
  
    
      
        f
      
    
    {\displaystyle f}
  
 or 
  
    
      
        g
      
    
    {\displaystyle g}
  
: empirical risk minimization and structural risk minimization. Empirical risk minimization seeks the function that best fits the training data. Structural risk minimization includes a penalty function that controls the bias/variance tradeoff.
In both cases, it is assumed that the training set consists of a sample of independent and identically distributed pairs, 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        
        
          y
          
            i
          
        
        )
      
    
    {\displaystyle (x_{i},\;y_{i})}
  
. In order to measure how well a function fits the training data, a loss function 
  
    
      
        L
        :
        Y
        ×
        Y
        →
        
          
            R
          
          
            ≥
            0
          
        
      
    
    {\displaystyle L:Y\times Y\to \mathbb {R} ^{\geq 0}}
  
 is defined. For training example 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        
        
          y
          
            i
          
        
        )
      
    
    {\displaystyle (x_{i},\;y_{i})}
  
, the loss of predicting the value 
  
    
      
        
          
            
              y
              ^
            
          
        
      
    
    {\displaystyle {\hat {y}}}
  
 is 
  
    
      
        L
        (
        
          y
          
            i
          
        
        ,
        
          
            
              y
              ^
            
          
        
        )
      
    
    {\displaystyle L(y_{i},{\hat {y}})}
  
.
The risk 
  
    
      
        R
        (
        g
        )
      
    
    {\displaystyle R(g)}
  
 of function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 is defined as the expected loss of 
  
    
      
        g
      
    
    {\displaystyle g}
  
. This can be estimated from the training data as
In empirical risk minimization, the supervised learning algorithm seeks the function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 that minimizes 
  
    
      
        R
        (
        g
        )
      
    
    {\displaystyle R(g)}
  
. Hence, a supervised learning algorithm can be constructed by applying an optimization algorithm to find 
  
    
      
        g
      
    
    {\displaystyle g}
  
.
When 
  
    
      
        g
      
    
    {\displaystyle g}
  
 is a conditional probability distribution 
  
    
      
        P
        (
        y
        
          |
        
        x
        )
      
    
    {\displaystyle P(y|x)}
  
 and the loss function is the negative log likelihood: 
  
    
      
        L
        (
        y
        ,
        
          
            
              y
              ^
            
          
        
        )
        =
        −
        log
        ⁡
        P
        (
        y
        
          |
        
        x
        )
      
    
    {\displaystyle L(y,{\hat {y}})=-\log P(y|x)}
  
, then empirical risk minimization is equivalent to maximum likelihood estimation.
When 
  
    
      
        G
      
    
    {\displaystyle G}
  
 contains many candidate functions or the training set is not sufficiently large, empirical risk minimization leads to high variance and poor generalization. The learning algorithm is able to memorize the training examples without generalizing well. This is called overfitting.
Structural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization. The regularization penalty can be viewed as implementing a form of Occam's razor that prefers simpler functions over more complex ones.
A wide variety of penalties have been employed that correspond to different definitions of complexity. For example, consider the case where the function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 is a linear function of the form
A popular regularization penalty is 
  
    
      
        
          ∑
          
            j
          
        
        
          β
          
            j
          
          
            2
          
        
      
    
    {\displaystyle \sum _{j}\beta _{j}^{2}}
  
, which is the squared Euclidean norm of the weights, also known as the 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
 norm. Other norms include the 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 norm, 
  
    
      
        
          ∑
          
            j
          
        
        
          |
        
        
          β
          
            j
          
        
        
          |
        
      
    
    {\displaystyle \sum _{j}|\beta _{j}|}
  
, and the 
  
    
      
        
          L
          
            0
          
        
      
    
    {\displaystyle L_{0}}
  
 "norm", which is the number of non-zero 
  
    
      
        
          β
          
            j
          
        
      
    
    {\displaystyle \beta _{j}}
  
s. The penalty will be denoted by 
  
    
      
        C
        (
        g
        )
      
    
    {\displaystyle C(g)}
  
.
The supervised learning optimization problem is to find the function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 that minimizes
The parameter 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
  
 controls the bias-variance tradeoff. When 
  
    
      
        λ
        =
        0
      
    
    {\displaystyle \lambda =0}
  
, this gives empirical risk minimization with low bias and high variance. When 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
  
 is large, the learning algorithm will have high bias and low variance. The value of 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
  
 can be chosen empirically via cross validation.
The complexity penalty has a Bayesian interpretation as the negative log prior probability of 
  
    
      
        g
      
    
    {\displaystyle g}
  
, 
  
    
      
        −
        log
        ⁡
        P
        (
        g
        )
      
    
    {\displaystyle -\log P(g)}
  
, in which case 
  
    
      
        J
        (
        g
        )
      
    
    {\displaystyle J(g)}
  
 is the posterior probability of 
  
    
      
        g
      
    
    {\displaystyle g}
  
.
The training methods described above are discriminative training methods, because they seek to find a function 
  
    
      
        g
      
    
    {\displaystyle g}
  
 that discriminates well between the different output values (see discriminative model). For the special case where 
  
    
      
        f
        (
        x
        ,
        y
        )
        =
        P
        (
        x
        ,
        y
        )
      
    
    {\displaystyle f(x,y)=P(x,y)}
  
 is a joint probability distribution and the loss function is the negative log likelihood 
  
    
      
        −
        
          ∑
          
            i
          
        
        log
        ⁡
        P
        (
        
          x
          
            i
          
        
        ,
        
          y
          
            i
          
        
        )
        ,
      
    
    {\displaystyle -\sum _{i}\log P(x_{i},y_{i}),}
  
 a risk minimization algorithm is said to perform generative training, because 
  
    
      
        f
      
    
    {\displaystyle f}
  
 can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis.
There are several ways in which the standard supervised learning problem can be generalized:
